quarterly_indexes = c()
for (i in 0:90) {
if (i%%3==0) {
quarterly_indexes <- c(quarterly_indexes, 5+i)
}
}
profit_total = as.numeric(t(input_sheet[24,quarterly_indexes]))
profit_total <- as.data.frame((profit_total))
data <- data.frame(quarters, rev_used, rev_wholesale, rev_other, new_stores["nstores"], rev_total)
sample <- sample.int(n = nrow(data), size = floor(1*nrow(data)), replace = F)
training <- profit_total[sample,]
testing <- data[-sample,]
tsData = ts(profit_total, start = c(2011,1), frequency = 4)
fit <- auto.arima(tsData, approximation=FALSE, trace=FALSE)
arima_forecast = forecast(fit, h = 1)
accuracy(fit)
plot(arima_forecast)
arima_forecast
accuracy(fit)
plot(arima_forecast, main="title")
accuracy(fit)
plot(arima_forecast, main="Profit")
accuracy(fit)
plot(arima_forecast, main="Profit", xlab="Quarter", ylab="in Thousands")
accuracy(fit)
plot(arima_forecast, main="Profit", xlab="Quarter", ylab="Thousands")
accuracy(fit)
plot(arima_forecast, main="Gross Profit", xlab="Quarter", ylab="Thousands of Dollars")
summary(fit)
accuracy(fit)
plot(arima_forecast, main="Profit Forecasting", xlab="Quarter", ylab="Gross Profit, in Thousands of Dollars")
fit <- auto.arima(tsData, approximation=FALSE, trace=FALSE)
arima_forecast = forecast(fit, h = 10)
accuracy(fit)
plot(arima_forecast, main="Profit Forecasting", xlab="Quarter", ylab="Gross Profit, in Thousands of Dollars")
arima_forecast
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
# allows reading of excel sheets
library(readxl)
# allows writing of excel sheets
library(writexl)
library(zoo)
library(forecast)
excel_sheets('financial_recleaned.xlsx')
excel_sheets('new_stores.xlsx')
input_sheet = read_excel("financial_recleaned.xlsx", sheet=1, col_names = TRUE)
new_stores = read_excel("new_stores.xlsx", sheet=1, col_names = TRUE)
# zoo sequence to name year/quarter
quarters <- as.yearqtr(2011 + seq(0, 30)/4)
format(quarters, "%Y Quarter %q")
quarters <-  as.numeric(quarters)
quarterly_indexes = c()
for (i in 0:90) {
if (i%%3==0) {
quarterly_indexes <- c(quarterly_indexes, 5+i)
}
}
rev_used = as.numeric(t(input_sheet[7,quarterly_indexes]))
rev_wholesale = as.numeric(t(input_sheet[8,quarterly_indexes]))
rev_other = as.numeric(t(input_sheet[13,quarterly_indexes]))
rev_total = as.numeric(t(input_sheet[15,quarterly_indexes]))
rev_total <- as.data.frame((rev_total))
data <- data.frame(quarters, rev_used, rev_wholesale, rev_other, new_stores["nstores"], rev_total)
sample <- sample.int(n = nrow(data), size = floor(0.95*nrow(data)), replace = T)
training <- rev_total[sample,]
testing <- data[-sample,]
tsData = ts(rev_total, start = c(2011,1), frequency = 4)
fit <- auto.arima(tsData, approximation=FALSE, trace=FALSE)
arima_forecast = forecast(fit, h = 1)
accuracy(fit)
plot(arima_forecast, main="Revenue Forecasting", xlab="Quarter", ylab="Gross Revenue, in Thousands of Dollars")
arima_forecast
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
tsData = ts(profit_total, start = c(2011,1), frequency = 4)
fit <- auto.arima(tsData, approximation=FALSE, trace=FALSE)
arima_forecast = forecast(fit, h = 10)
accuracy(fit)
plot(arima_forecast, main="Profit Forecasting", xlab="Quarter", ylab="Gross Profit, in Thousands of Dollars")
summary(fit)
coef(fit)
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
fit <- auto.arima(new_stores, approximation=FALSE, trace=FALSE)
arima_forecast = forecast(fit, h = 1)
accuracy(fit)
plot(arima_forecast, main="Revenue Forecasting", xlab="Quarter", ylab="Gross Revenue, in Thousands of Dollars")
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
fit <- auto.arima(new_stores["nstores"], approximation=FALSE, trace=FALSE)
arima_forecast = forecast(fit, h = 1)
accuracy(fit)
plot(arima_forecast, main="Revenue Forecasting", xlab="Quarter", ylab="Gross Revenue, in Thousands of Dollars")
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
fit <- auto.arima(tsData, approximation=FALSE, trace=FALSE)
arima_forecast = forecast(fit, h = 1)
accuracy(fit)
plot(arima_forecast, main="Revenue Forecasting", xlab="Quarter", ylab="Gross Revenue, in Thousands of Dollars")
arima_forecast
summary(fit)
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
#fit <- auto.arima(tsData, approximation=FALSE, trace=FALSE)
+fit <- lm(rev_total ~ quarters + rev_used, data=data)
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
# allows reading of excel sheets
library(readxl)
# allows writing of excel sheets
library(writexl)
library(zoo)
library(forecast)
excel_sheets('financial_recleaned.xlsx')
excel_sheets('new_stores.xlsx')
input_sheet = read_excel("financial_recleaned.xlsx", sheet=1, col_names = TRUE)
new_stores = read_excel("new_stores.xlsx", sheet=1, col_names = TRUE)
# zoo sequence to name year/quarter
quarters <- as.yearqtr(2011 + seq(0, 30)/4)
format(quarters, "%Y Quarter %q")
quarters <-  as.numeric(quarters)
quarterly_indexes = c()
for (i in 0:90) {
if (i%%3==0) {
quarterly_indexes <- c(quarterly_indexes, 5+i)
}
}
rev_used = as.numeric(t(input_sheet[7,quarterly_indexes]))
rev_wholesale = as.numeric(t(input_sheet[8,quarterly_indexes]))
rev_other = as.numeric(t(input_sheet[13,quarterly_indexes]))
rev_total = as.numeric(t(input_sheet[15,quarterly_indexes]))
rev_total <- as.data.frame((rev_total))
data <- data.frame(quarters, rev_used, rev_wholesale, rev_other, new_stores["nstores"], rev_total)
#fit <- auto.arima(tsData, approximation=FALSE, trace=FALSE)
+fit <- lm(rev_total ~ quarters + rev_used, data=data)
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
rev_wholesale = as.numeric(t(input_sheet[8,quarterly_indexes]))
rev_other = as.numeric(t(input_sheet[13,quarterly_indexes]))
rev_total = as.numeric(t(input_sheet[15,quarterly_indexes]))
data <- data.frame(quarters, rev_used, rev_wholesale, rev_other, new_stores["nstores"], rev_total)
#fit <- auto.arima(tsData, approximation=FALSE, trace=FALSE)
+fit <- lm(rev_total ~ quarters + rev_used, data=data)
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
#fit <- auto.arima(tsData, approximation=FALSE, trace=FALSE)
fit <- lm(rev_total ~ quarters + rev_used, data=data)
fit
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
View(new_stores)
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
#fit <- auto.arima(tsData, approximation=FALSE, trace=FALSE)
fit <- lm(rev_total ~ quarters + new_stores, data=data)
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
new_stores <- as.numeric(new_stores)
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
#rev_total <- as.data.frame((rev_total))
new_stores <- new_stores["nstores"]
data <- data.frame(quarters, rev_used, rev_wholesale, rev_other, new_stores, rev_total)
#fit <- auto.arima(tsData, approximation=FALSE, trace=FALSE)
fit <- lm(rev_total ~ quarters + new_stores, data=data)
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
#rev_total <- as.data.frame((rev_total))
new_stores <- as_numeric(new_stores["nstores"])
data <- data.frame(quarters, rev_used, rev_wholesale, rev_other, new_stores, rev_total)
#fit <- auto.arima(tsData, approximation=FALSE, trace=FALSE)
fit <- lm(rev_total ~ quarters + new_stores, data=data)
data
rev_used = as.numeric(t(input_sheet[7,quarterly_indexes]))
rev_wholesale = as.numeric(t(input_sheet[8,quarterly_indexes]))
rev_other = as.numeric(t(input_sheet[13,quarterly_indexes]))
rev_total = as.numeric(t(input_sheet[15,quarterly_indexes]))
#rev_total <- as.data.frame((rev_total))
new_stores <- as_numeric(new_stores["nstores"])
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
#rev_total <- as.data.frame((rev_total))
new_stores <- as.numeric(new_stores["nstores"])
new_stores
new_stores["nstores"]
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
#rev_total <- as.data.frame((rev_total))
new_stores <- new_stores["nstores"]
data <- data.frame(quarters, rev_used, rev_wholesale, rev_other, new_stores, rev_total)
data
#fit <- auto.arima(tsData, approximation=FALSE, trace=FALSE)
fit <- lm(rev_total ~ quarters + new_stores, data=data)
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
#fit <- auto.arima(tsData, approximation=FALSE, trace=FALSE)
fit <- lm(rev_total ~ quarters, data=data)
fit
quarter<-rep(1:4,4)
plot(c(cpi,rep(NA,32)), xaxt="n", ylab="CPI",xlab="",ylim=c(2000000, 9000000))
#q <- as.numeric(quarters)
cpi<-c(rev_total)
quarter<-rep(1:4,4)
plot(c(cpi,rep(NA,32)), xaxt="n", ylab="CPI",xlab="",ylim=c(2000000, 9000000))
#old_data=data.frame(year=rep(c(2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025), each=3), quarter=rep(1:3,1))
testing=data.frame((year=new_quarters), quarter=rep(1:4,1))
year<-rep(2010:2025,each=4)
lines(1:31, predict(
fit,
testing))
year<-rep(2010:2025,each=4)
axis(1,labels=paste(year,quarter,sep=" Q"),at=1:64,las=3)
#curve(fit, from=2010, to=2025, xlab="x", ylab="y")
#curve(fit, from=2010, to=2025, xlab="x", ylab="y")
#abline(coef(fit)[2010:2025])
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
#fit <- auto.arima(tsData, approximation=FALSE, trace=FALSE)
fit <- lm(rev_total ~ new_stores, data=data)
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
#fit <- auto.arima(tsData, approximation=FALSE, trace=FALSE)
fit <- lm(rev_total ~ as.matrix(new_stores), data=data)
#q <- as.numeric(quarters)
cpi<-c(rev_total)
fit
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
# allows reading of excel sheets
library(readxl)
# allows writing of excel sheets
library(writexl)
library(zoo)
library(forecast)
excel_sheets('financial_recleaned.xlsx')
excel_sheets('new_stores.xlsx')
input_sheet = read_excel("financial_recleaned.xlsx", sheet=1, col_names = TRUE)
new_stores = read_excel("new_stores.xlsx", sheet=1, col_names = TRUE)
# zoo sequence to name year/quarter
quarters <- as.yearqtr(2011 + seq(0, 30)/4)
format(quarters, "%Y Quarter %q")
quarters <-  as.numeric(quarters)
quarterly_indexes = c()
for (i in 0:90) {
if (i%%3==0) {
quarterly_indexes <- c(quarterly_indexes, 5+i)
}
}
rev_used = as.numeric(t(input_sheet[7,quarterly_indexes]))
rev_wholesale = as.numeric(t(input_sheet[8,quarterly_indexes]))
rev_other = as.numeric(t(input_sheet[13,quarterly_indexes]))
rev_total = as.numeric(t(input_sheet[15,quarterly_indexes]))
#rev_total <- as.data.frame((rev_total))
new_stores <- new_stores["nstores"]
data <- data.frame(quarters, rev_used, rev_wholesale, rev_other, new_stores, rev_total)
#fit <- auto.arima(tsData, approximation=FALSE, trace=FALSE)
fit <- lm(rev_total ~ as.matrix(new_stores), data=data)
#q <- as.numeric(quarters)
cpi<-c(rev_total)
quarter<-rep(1:4,4)
#old_data=data.frame(year=rep(c(2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025), each=3), quarter=rep(1:3,1))
testing=data.frame((year=new_quarters), quarter=rep(1:4,1))
year<-rep(2010:2025,each=4)
lines(1:31, predict(
fit,
testing))
year<-rep(2010:2025,each=4)
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
lines(1:6, predict(
fit,
data))
fit
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
eq = function(x){2450069+296353*x}
plot(eq(0:6), type='l')
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
fit
#fit <- auto.arima(tsData, approximation=FALSE, trace=FALSE)
fit <- aov(rev_total ~ as.matrix(new_stores), data=data)
fit
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
plot(eq(0:6), type='l')
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
points(data$nstores, data$rev_total)
eq = function(x){2450069+296353*x}
plot(eq(0:6), type='l')
#fit <- auto.arima(tsData, approximation=FALSE, trace=FALSE)
fit <- aov(rev_total ~ as.matrix(new_stores), data=data)
points(data$nstores, data$rev_total)
points(data$nstores, data$rev_total)
eq = function(x){2450069+296353*x}
plot(eq(0:6), type='l')
#arima_forecast = forecast(fit, h = 1)
#fit <- auto.arima(tsData, approximation=FALSE, trace=FALSE)
fit <- aov(rev_total ~ as.matrix(new_stores), data=data)
points(data$nstores, data$rev_total)
eq = function(x){2450069+296353*x}
plot(eq(0:6), type='l')
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
# allows reading of excel sheets
library(readxl)
# allows writing of excel sheets
library(writexl)
library(zoo)
library(forecast)
excel_sheets('financial_recleaned.xlsx')
excel_sheets('new_stores.xlsx')
input_sheet = read_excel("financial_recleaned.xlsx", sheet=1, col_names = TRUE)
new_stores = read_excel("new_stores.xlsx", sheet=1, col_names = TRUE)
# zoo sequence to name year/quarter
quarters <- as.yearqtr(2011 + seq(0, 30)/4)
format(quarters, "%Y Quarter %q")
quarters <-  as.numeric(quarters)
quarterly_indexes = c()
for (i in 0:90) {
if (i%%3==0) {
quarterly_indexes <- c(quarterly_indexes, 5+i)
}
}
rev_used = as.numeric(t(input_sheet[7,quarterly_indexes]))
rev_wholesale = as.numeric(t(input_sheet[8,quarterly_indexes]))
rev_other = as.numeric(t(input_sheet[13,quarterly_indexes]))
rev_total = as.numeric(t(input_sheet[15,quarterly_indexes]))
#rev_total <- as.data.frame((rev_total))
new_stores <- new_stores["nstores"]
data <- data.frame(quarters, rev_used, rev_wholesale, rev_other, new_stores, rev_total)
#fit <- auto.arima(tsData, approximation=FALSE, trace=FALSE)
fit <- aov(rev_total ~ as.matrix(new_stores), data=data)
points(data$nstores, data$rev_total)
eq = function(x){2450069+296353*x}
#arima_forecast = forecast(fit, h = 1)
#arima_forecast = forecast(fit, h = 1)
#accuracy(fit)
#arima_forecast
#summary(fit)
#summary(fit)
#coef(fit)
# allows reading of excel sheets
library(readxl)
# allows writing of excel sheets
library(writexl)
library(zoo)
library(forecast)
excel_sheets('financial_recleaned.xlsx')
excel_sheets('new_stores.xlsx')
input_sheet = read_excel("financial_recleaned.xlsx", sheet=1, col_names = TRUE)
new_stores = read_excel("new_stores.xlsx", sheet=1, col_names = TRUE)
# zoo sequence to name year/quarter
quarters <- as.yearqtr(2011 + seq(0, 30)/4)
format(quarters, "%Y Quarter %q")
quarters <-  as.numeric(quarters)
quarterly_indexes = c()
for (i in 0:90) {
if (i%%3==0) {
quarterly_indexes <- c(quarterly_indexes, 5+i)
}
}
rev_used = as.numeric(t(input_sheet[7,quarterly_indexes]))
rev_wholesale = as.numeric(t(input_sheet[8,quarterly_indexes]))
rev_other = as.numeric(t(input_sheet[13,quarterly_indexes]))
rev_total = as.numeric(t(input_sheet[15,quarterly_indexes]))
#rev_total <- as.data.frame((rev_total))
new_stores <- new_stores["nstores"]
data <- data.frame(quarters, rev_used, rev_wholesale, rev_other, new_stores, rev_total)
#fit <- auto.arima(tsData, approximation=FALSE, trace=FALSE)
fit <- aov(rev_total ~ as.matrix(new_stores), data=data)
points(data$nstores, data$rev_total)
eq = function(x){2450069+296353*x}
#arima_forecast = forecast(fit, h = 1)
#arima_forecast = forecast(fit, h = 1)
#accuracy(fit)
#arima_forecast
#summary(fit)
#summary(fit)
#coef(fit)
#c(data["rev_total"],rep(2011:2018))
#c(data["rev_total"],rep(2011:2018))
#plot(c(data,rep(NA,12)),xaxt="n",ylab="CPI",xlab="",ylim=c(162,190))
#c(data["rev_total"],rep(2011:2018))
#plot(c(data,rep(NA,12)),xaxt="n",ylab="CPI",xlab="",ylim=c(162,190))
#new.df <- data.frame(rev_used=c(3429247))
#q <- as.numeric(quarters)
#q <- as.numeric(quarters)
#cpi<-c(rev_total)
#q <- as.numeric(quarters)
#cpi<-c(rev_total)
#df <- data.frame(q,cpi)
#newQ <- as.data.frame(quarters)
#plot(c(cpi,rep(NA,32)), xaxt="n", ylab="CPI",xlab="",ylim=c(2000000, 9000000))
#new_quarters <- as.yearqtr(2010 + seq(24, 47)/3)
#new_quarters <- as.yearqtr(2010 + seq(24, 47)/3)
#format(new_quarters, "%Y Quarter %q")
#new_quarters <- as.yearqtr(2010 + seq(24, 47)/3)
#format(new_quarters, "%Y Quarter %q")
##new_quarters <-  as.numeric(new_quarters)
#new_quarters <- as.yearqtr(2010 + seq(24, 47)/3)
#format(new_quarters, "%Y Quarter %q")
##new_quarters <-  as.numeric(new_quarters)
#newdata = data.frame(new_quarters)
#old_data=data.frame(year=rep(c(2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025), each=3), quarter=rep(1:3,1))
#year<-rep(2010:2025,each=4)
#year<-rep(2010:2025,each=4)
#newdata=data.frame(year=rep(c(2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025), each=3), quarter=rep(1:3,1))
#predict(fit, newdata)
#predict(fit, newdata)
#newdata=data.frame(year=rep(c(2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025), each=4), quarter=rep(1:4,1))
#fit <- auto.arima(tsData, approximation=FALSE, trace=FALSE)
fit <- aov(rev_total ~ as.matrix(new_stores), data=data)
points(data$nstores, data$rev_total)
eq = function(x){2450069+296353*x}
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
plot(eq(0:6), type='l')
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
plot(data$nstores, data$rev_total)
eq = function(x){2450069+296353*x}
line(eq(0:6), type='l')
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
#fit <- auto.arima(tsData, approximation=FALSE, trace=FALSE)
fit <- aov(rev_total ~ as.matrix(new_stores), data=data)
accuracy(fit)
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
#fit <- auto.arima(tsData, approximation=FALSE, trace=FALSE)
fit <- aov(rev_total ~ as.matrix(new_stores), data=data)
summary(fit)
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
source('~/code/revenue-forecast-analysis/wdhoy/script_2.R')
# allows reading/writing of excel sheets, functions
library(readxl)
library(writexl)
library(zoo)
library(forecast)
excel_sheets('financial_recleaned.xlsx')
excel_sheets('new_stores.xlsx')
#read excel sheets
input_sheet = read_excel("financial_recleaned.xlsx", sheet=1, col_names = TRUE)
new_stores = read_excel("new_stores.xlsx", sheet=1, col_names = TRUE)
#get data
quarterly_indexes = c()
for (i in 0:90) {
if (i%%3==0) {
quarterly_indexes <- c(quarterly_indexes, 5+i)
}
}
#zoo sequence to create name as year/quarter
quarters <- as.yearqtr(2011 + seq(0, 30)/4)
format(quarters, "%Y Quarter %q")
quarters <-  as.numeric(quarters)
#REVENUE FORECAST
rev_total = as.numeric(t(input_sheet[15,quarterly_indexes]))
rev_total <- as.data.frame((rev_total))
#training
new_stores <- new_stores["nstores"]
data <- data.frame(quarters, new_stores, rev_total)
fit <- aov(rev_total ~ as.matrix(new_stores), data=data)
summary(fit)
plot(data$nstores, data$rev_total, main="New Stores vs Revenue", xlab="Number of New Stores opened in a Quarter", ylab="Revenue")
eq = function(x){2450069+296353*x}
lines(eq(1:6), type='l')
fit <- lm(rev_total ~ as.matrix(new_stores), data=data)
#REVENUE FORECAST
rev_total = as.numeric(t(input_sheet[15,quarterly_indexes]))
#training
new_stores <- new_stores["nstores"]
data <- data.frame(quarters, new_stores, rev_total)
fit <- lm(rev_total ~ as.matrix(new_stores), data=data)
summary(fit)
plot(data$nstores, data$rev_total, main="New Stores vs Revenue", xlab="Number of New Stores opened in a Quarter", ylab="Revenue")
eq = function(x){2450069+296353*x}
lines(eq(1:6), type='l')
# plot two sets of data on one graph
x = c(0, 1,2,3,4,5,6,7,8, 9)
y1 = 0.5*x
y2 = 0.5*x + 4
# plot the first as scatter plot in red with slightly larger axis's
plot(x, y1, main="title", sub="subtitle",
xlab="X-axis label", ylab="y-axix label",
xlim=c(-1, 10), ylim=c(-1, 10),
col="red")
# plot the second as a line in green
lines(x, y2, col="green")
# allows reading/writing of excel sheets, functions
library(readxl)
library(writexl)
library(zoo)
library(forecast)
excel_sheets('financial_recleaned.xlsx')
excel_sheets('new_stores.xlsx')
#read excel sheets
input_sheet = read_excel("financial_recleaned.xlsx", sheet=1, col_names = TRUE)
new_stores = read_excel("new_stores.xlsx", sheet=1, col_names = TRUE)
#get data
quarterly_indexes = c()
for (i in 0:90) {
if (i%%3==0) {
quarterly_indexes <- c(quarterly_indexes, 5+i)
}
}
#zoo sequence to create name as year/quarter
quarters <- as.yearqtr(2011 + seq(0, 30)/4)
format(quarters, "%Y Quarter %q")
quarters <-  as.numeric(quarters)
#REVENUE FORECAST
rev_total = as.numeric(t(input_sheet[15,quarterly_indexes]))
#training
new_stores <- new_stores["nstores"]
data <- data.frame(quarters, new_stores, rev_total)
fit <- lm(rev_total ~ as.matrix(new_stores), data=data)
summary(fit)
fit
fit <- lm(rev_total ~ as.matrix(new_stores), data=data)
summary(fit)
plot(data$nstores, data$rev_total, main="New Stores vs Revenue", xlab="Number of New Stores opened in a Quarter", ylab="Revenue")
eq = function(x){2450069+296353*x}
lines(eq(1:6), type='l')
